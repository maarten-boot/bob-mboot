#! ./bin/bob

define test1(what) {
    result = what();
    stdout.Display(result ,"\n");
}

define t1() {
    1 + 1 == 2;
}

test1(t1);


// testing continue in a while block
define while_continue() {
    i = 0;

    while(i < 10) {
        stdout.Display(i, "\n");
        i++;

        continue;
    }
}

// testing continue in a for block
define for_continue() {
    for(i = 0; i < 10; i++) {
        stdout.Display(i, "\n");

        continue;
    }
}

// testing lambda: from original example by dbetz
define fibo_generator()
{
    local fibo_nm1 = 0;
    local fibo_nm2 = 1;

    return function () {
        local fibo = fibo_nm1 + fibo_nm2;

        fibo_nm2 = fibo_nm1;
        fibo_nm1 = fibo;

        return fibo;
    };
}

define test_fibo()
{
    stdout.Display("Make two fibo generators\n");

    fibo1 = fibo_generator();
    fibo2 = fibo_generator();

    stdout.Display("First pump 10 values from the fibo1 generator\n");
    for (i = 0; i < 10; ++i) {
        stdout.Display("fibo1 ", fibo1(), "\n");
    }

    stdout.Display("Now pump 5 values from the fibo2 generator\n");
    for (i = 0; i < 5; ++i) {
        stdout.Display("fibo2 ", fibo2(), "\n");
    }

    stdout.Display("Finally, resume pumping values from the fibo1 generator\n");
    for (i = 0; i < 10; ++i) {
        stdout.Display("fibo1 ", fibo1(), "\n");
    }
}

// testing object; not working yet
z = new Object();

// Cave
Cave = new Object();

define Cave.AddHazard(hazzard) {
    print("add hazzard to cave\n");
}

# ///////////
# // Hazard

Hazard = new Object();

define Hazard.SetLocationMutual(what) {
    this.location = what;
    what.AddHazard(this);
}

define Hazard.initialize(cave) {
    this.SetLocationMutual(cave);
    // this.location = cave;
    // cave.AddHazard(this);
    return this;
}

define Hazard.Move(cave) {
    if (this.location != cave) {
        this.location.RemoveHazard(this);

        // this.location = cave;
        // cave.AddHazard(this);
        this.SetLocationMutual(cave);
    }

    return this;
}

//////////
// Pit
Game = new Object();

define Game.Over(message) {
    stdout.Display(message + "\n");
}

Pit = new Hazard;

define Pit.Bump(game)
{
    game.Over("YYYIIIIEEEE . . . Fell in pit!");
}

///////////////////////////////////////////////
///////////////////////////////////////////////

define testVector() {
    // locals have to be at the beginning and cannot be declared later in the code
    local x = 1, y = 2 , z = 3;
    local b = "123";
    local c = "123";

    stdout.Display("\n test vector \n");

    {
        local pp = 6, x = 8;
        stdout.Display(pp, " ", x, "\n");
    }

    stdout.Display(pp, " ", x, "\n");
    b = "abcdefg";

    bb = new Object;
    bb.x = 99;

    define aaa() { bb.x = 999; };

    stdout.Display(bb, "\n");
    stdout.Display(bb.x, "\n");
    aaa();
    stdout.Display(bb.x, "\n");
    // variables not declared local are global by default

    a = b[ 4 ];
    stdout.Display(b, " ", a, " ", b[5], "\n");

    b[4] = 102;
    a = b[ 4 ];
    stdout.Display(b, " ", a, " ", b[5], "\n");

    nn = 1, 2, 4;
}

// uses a main function as im used to that ;-)
define main()
{
    while_continue();
    for_continue();
    test_fibo();
    v = testVector();

    b = "zyxwvu";
    stdout.Display(b, " ", a, " ", b[5], " ", v, "\n");
}

main();
